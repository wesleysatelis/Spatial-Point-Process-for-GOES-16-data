TRUE ~ "other"),
canal=str_replace(str_extract(file, "M6C\\d{2}"), "M6C", ""),
canal=as.numeric(canal))
# separar produtos
fdcf  <- df_caminhos %>% filter(produto == "fdcf") %>%
arrange(start_time) %>%
mutate(group_id = row_number())  # cada FDCF define um grupo
cmipf <- df_caminhos %>% filter(produto == "cmipf")
acmc  <- df_caminhos %>% filter(produto == "acmc")
# ---------------------------
# Juntar FDCF com CMIPF (mesmo start_time)
fdcf_cmipf <- fdcf %>%
left_join(cmipf, by = "start_time", suffix = c("_fdcf", "_cmipf")) %>%
mutate(group_id = group_id)  # mantém group_id do fdcf
# ---------------------------
# Juntar FDCF com ACMC (mais próximo no tempo, até 5 min de tolerância)
fdcf_acmc <- difference_left_join(
fdcf,
acmc,
by = "start_time",
max_dist = dminutes(5),
distance_col = "time_diff"
) %>%
group_by(file.x) %>%
slice_min(time_diff, n = 1) %>%   # pega ACMC mais próximo
ungroup() %>%
transmute(file = file.y,
start_time = start_time.y,
produto = "acmc",
canal = NA,
group_id)
# ---------------------------
# Organizar estrutura final: tudo em linhas
df_final <- bind_rows(
fdcf %>% select(file, start_time, produto, canal, group_id),
cmipf %>% inner_join(fdcf %>% select(start_time, group_id), by = "start_time"),
fdcf_acmc
) %>%
arrange(group_id, produto, canal)
df_final
df_final <- df_final %>%
group_by(group_id) %>%
mutate(start_time = as.POSIXct(names(sort(table(start_time), decreasing = TRUE)[1]),
tz = "UTC")) %>%
ungroup()
View(df_final)
df_list <- df_final |>
split(df_final$group_id)
df_list
gc()
df_final
df_final |>
mutate(dia=day(start_time))
df_final |>
mutate(dia=day(start_time)) |>
distinct(dia)
rm(list=ls())
source('0_fun.R', encoding = 'utf-8')
source('fun_chat.R')
library(fuzzyjoin)
shape <- st_read('pantanal_shape/pantanal.shp')
shape <- vect(shape)
data0 <- '2020-09-01'
data1 <- '2020-09-07'
canais <- c(2, 3, 7)
# -------------------------------------------------------------------------
system('rm -rf files/*')
data_seq <- tibble(data=seq(ymd(data0), ymd(data1), by='days')) |>
mutate(doy=lubridate::yday(data),
doy=str_pad(doy, width = 3, side = 'left', pad = '0'),
ano=year(data))
data_seq
for(i in data_seq){
print(i)
}
for(i in 1:nrow(data_seq)){
print(data_seq[i,])
}
caminhos <- list()
for(i in 1:nrow(data_seq)){
temp <- data_seq[i,]
arquivos_fogo <- cria_caminhos("ABI-L2-FDCF", doy=temp$doy, ano=temp$ano)
arquivos_canais <- cria_caminhos("ABI-L2-CMIPF", canais, doy=temp$doy, ano=temp$ano) |>
select(-canal)
arquivos_clear_sky <- cria_caminhos("ABI-L2-ACMC", doy=temp$doy, ano=temp$ano)
caminhos[[length(caminhos)+1]] <- bind_rows(arquivos_fogo, arquivos_canais, arquivos_clear_sky)
}
caminhos
caminhos
caminhos <- bind_rows(caminhos)
caminhos
df_caminhos <- caminhos |>
arrange(timestamp) |>
mutate(start_time = as.POSIXct(timestamp, format = "%Y%j%H%M%S", tz = "UTC")) |>
select(-timestamp) |>
mutate(produto = case_when(
str_detect(file, "ABI-L2-FDCF") ~ "fdcf",
str_detect(file, "ABI-L2-CMIPF") ~ "cmipf",
str_detect(file, "ABI-L2-ACMC")  ~ "acmc",
TRUE ~ "other"),
canal=str_replace(str_extract(file, "M6C\\d{2}"), "M6C", ""),
canal=as.numeric(canal))
# separar produtos
fdcf  <- df_caminhos |>
filter(produto == "fdcf") |>
arrange(start_time) |>
mutate(group_id = row_number())  # cada FDCF define um grupo
cmipf <- df_caminhos |>
filter(produto == "cmipf")
acmc  <- df_caminhos |>
filter(produto == "acmc")
# ---------------------------
# Juntar FDCF com CMIPF (mesmo start_time)
fdcf_cmipf <- fdcf |>
left_join(cmipf, by = "start_time", suffix = c("_fdcf", "_cmipf")) |>
mutate(group_id = group_id)  # mantém group_id do fdcf
# ---------------------------
# Juntar FDCF com ACMC (mais próximo no tempo, até 5 min de tolerância)
fdcf_acmc <- difference_left_join(fdcf, acmc, by = "start_time",
max_dist = dminutes(5),
distance_col = "time_diff") |>
group_by(file.x) |>
slice_min(time_diff, n = 1) |>   # pega ACMC mais próximo
ungroup() |>
transmute(file = file.y,
start_time = start_time.y,
produto = "acmc",
canal = NA,
group_id)
# ---------------------------
# Organizar estrutura final: tudo em linhas
df_final <- bind_rows(fdcf |> select(file, start_time, produto, canal, group_id),
cmipf |> inner_join(fdcf |> select(start_time, group_id), by = "start_time"),
fdcf_acmc) |>
arrange(group_id, produto, canal)
df_final <- df_final |>
group_by(group_id) |>
mutate(start_time = as.POSIXct(names(sort(table(start_time), decreasing = TRUE)[1]),
tz = "UTC")) |>
ungroup()
df_final |>
mutate(dia=day(start_time)) |>
distinct(dia)
df_final
rm(list = ls())
library(arrow)
library(patchwork)
library(lubridate)
library(ggplot2)
source('fun.R', encoding = 'utf-8')
source('0_fun.R', encoding = 'utf-8')
library(dplyr)
rm(list = ls())
library(arrow)
library(patchwork)
library(lubridate)
library(ggplot2)
source('0_fun.R', encoding = 'utf-8')
library(dplyr)
data <- open_dataset('dados_extraidos/') |>
filter(fogo == 1 & temp > 47 & radiatv > 5 & ano==2020 & mes%in%c(9)) |>
collect()
data <- open_dataset('dados_extraidos/') |>
filter(fire == 1 & temp > 47 & radiatv > 5 & ano==2020 & mes%in%c(9)) |>
collect()
data <- open_dataset('dados_extraidos/')
data
data <- open_dataset('dados_extraidos/') |>
filter(var=='fire', value == 1 & temp > 47 & radiatv > 5 & ano==2020 & mes%in%c(9)) |>
collect()
data <- open_dataset('dados_extraidos/') |>
collect()
data
data |>
distinct(var)
data |>
filter(str_detect(var, 'cmi'))
canais <- data |>
filter(str_detect(var, 'cmi'))
data
data |>
distinct(var)
data |>
filter(!str_detect(var, 'cmi'))
data |>
filter(!str_detect(var, 'cmi')) |>
distinct(var)
data |>
distinct(var)
canais
canais |>
pivot_wider(var, value)
canais |>
pivot_wider(names_from = var, values_from = value)
canais
canais |>
filter(var=='dqf_cmi')
canais |>
pivot_wider(names_from = var, values_from = value)
canais |>
filter(var!='dqf_cmi')
canais |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value)
canais <- canais |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value)
canais
data |>
distinct(var)
data |>
filter(!str_detect(var, 'cmi')) |>
distinct(var)
data |>
filter(!str_detect(var, 'cmi'))
data |>
filter(!str_detect(var, 'cmi')) |>
pivot_wider(names_from = var, values_from = value)
data_fire <- data |>
filter(!str_detect(var, 'cmi')) |>
pivot_wider(names_from = var, values_from = value)
data_fire |>
filter(fire==1, temp > 47 & radiatv > 5)
data_fire <- data |>
filter(!str_detect(var, 'cmi')) |>
pivot_wider(names_from = var, values_from = value) |>
filter(fire==1, temp > 47 & radiatv > 5)
data_fire
data_fire |>
distinct(dqf_fire)
data_fire
data <- open_dataset('dados_extraidos/') |>
collect()
data_fire <- data |>
filter(!str_detect(var, 'cmi')) |>
pivot_wider(names_from = var, values_from = value) |>
filter(fire==1, temp > 47 & radiatv > 5)
canais <- data |>
filter(str_detect(var, 'cmi'))
canais <- canais |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value)
canais
data_fire
canais
canais |>
mutate(nbr=(cmi_03 - cmi_07) / (cmi_03 + cmi_07),
ndvi=(cmi_03 - cmi_02) / (cmi_03 + cmi_02))
canais <- canais |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value) |>
mutate(nbr=(cmi_03 - cmi_07) / (cmi_03 + cmi_07),
ndvi=(cmi_03 - cmi_02) / (cmi_03 + cmi_02))
canais <- canais |>
filter(str_detect(var, 'cmi')) |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value) |>
mutate(nbr=(cmi_03 - cmi_07) / (cmi_03 + cmi_07),
ndvi=(cmi_03 - cmi_02) / (cmi_03 + cmi_02))
canais <- data |>
filter(str_detect(var, 'cmi')) |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value) |>
mutate(nbr=(cmi_03 - cmi_07) / (cmi_03 + cmi_07),
ndvi=(cmi_03 - cmi_02) / (cmi_03 + cmi_02))
canais
canais <- data |>
filter(str_detect(var, 'cmi')) |>
filter(var!='dqf_cmi') |>
pivot_wider(names_from = var, values_from = value) |>
mutate(nbr=(cmi_03 - cmi_07) / (cmi_03 + cmi_07),
ndvi=(cmi_03 - cmi_02) / (cmi_03 + cmi_02)) |>
select(x, y, dt_hms, nbr, ndvi)
canais
data_fire
data_fire |>
select(x, y, dt_hms, fire)
data_fire <- data_fire |>
select(x, y, dt_hms, fire)
canais
data_fire
canais
shape <- st_read('pantanal_shape/pantanal.shp')
# transformar o tibble em sf
df_sf <- st_as_sf(canais, coords = c("x", "y"), crs = 4674)  # ou crs do seu dado
df_sf
# plotar NDVI
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
canais
canais |>
group_by(x, y) |>
reframe(nbr=max(nbr),
ndvi=max(ndvi))
canais |>
group_by(x, y) |>
reframe(nbr=max(nbr, na.rm = T),
ndvi=max(ndvi, na.rm = T))
canais |>
group_by(x, y) |>
drop_na() |>
reframe(nbr=max(nbr, na.rm = T),
ndvi=max(ndvi, na.rm = T))
canais <- canais |>
group_by(x, y) |>
drop_na() |>
reframe(nbr=max(nbr, na.rm = T),
ndvi=max(ndvi, na.rm = T))
shape <- st_read('pantanal_shape/pantanal.shp')
# transformar o tibble em sf
df_sf <- st_as_sf(canais, coords = c("x", "y"), crs = 4674)  # ou crs do seu dado
# plotar NDVI
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
# plotar NBR
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = nbr), size = 0.4) +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NBR - GOES 16")
# plotar NBR
ggplot() +
geom_sf(data = df_sf, aes(color = nbr), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NBR - GOES 16")
# plotar NDVI
ggplot() +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
# plotar NDVI
ggplot() +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "A") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
# plotar NDVI
ggplot() +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "B") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
# plotar NDVI
ggplot() +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "D") +
theme_minimal() +
ggtitle("NDVI - GOES 16")
# plotar NBR
ggplot() +
geom_sf(data = df_sf, aes(color = nbr), size = 0.4) +
geom_sf(data = shape, fill = NA, color = "black") +
scale_color_viridis_c(option = "C") +
theme_minimal() +
ggtitle("NBR - GOES 16")
canais
data_fire
data_fire |>
distinct(x, y)
data_fire
# transformar focos de fogo em sf
df_fire_sf <- st_as_sf(df_fire, coords = c("x", "y"), crs = 4674)
# transformar focos de fogo em sf
df_fire_sf <- st_as_sf(data_fire, coords = c("x", "y"), crs = 4674)
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_ndvi_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "red", size = 1.2, shape = 4) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "red", size = 1.2, shape = 4) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 4) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 1) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 2) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 21) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 2) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 20) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NDVI + Focos de Fogo")
# plotar NBR + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NBR + Focos de Fogo")
# plotar NBR + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "D") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NBR + Focos de Fogo")
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "D") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NDVI + focos de fogo")
# plotar NBR + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1.2, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NBR + focos de fogo")
canais
data_fire
canais
data_fire
# plotar NDVI + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "D") +
geom_sf(data = df_fire_sf, color = "black", size = 1, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NDVI + focos de fogo")
# plotar NBR + pontos de fogo
ggplot() +
geom_sf(data = shape, fill = NA, color = "black") +
geom_sf(data = df_sf, aes(color = ndvi), size = 0.4) +
scale_color_viridis_c(option = "C") +
geom_sf(data = df_fire_sf, color = "black", size = 1, shape = 3) + # X vermelho
theme_minimal() +
ggtitle("NBR + focos de fogo")
